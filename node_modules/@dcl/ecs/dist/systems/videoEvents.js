import * as components from '../components';
import { EntityState } from '../engine/entity';
/**
 * @internal
 */
export function createVideoEventsSystem(engine) {
    const videoPlayerComponent = components.VideoPlayer(engine);
    const videoEventComponent = components.VideoEvent(engine);
    const entitiesCallbackVideoStateMap = new Map();
    function registerVideoEventsEntity(entity, callback) {
        // video event component is not added here because the renderer adds it
        // to every entity with a VideoPlayer component
        entitiesCallbackVideoStateMap.set(entity, { callback: callback });
    }
    function removeVideoEventsEntity(entity) {
        entitiesCallbackVideoStateMap.delete(entity);
    }
    function hasVideoEventsEntity(entity) {
        return entitiesCallbackVideoStateMap.has(entity);
    }
    // @internal
    engine.addSystem(function EventSystem() {
        for (const [entity, data] of entitiesCallbackVideoStateMap) {
            const videoPlayer = videoPlayerComponent.getOrNull(entity);
            if (engine.getEntityState(entity) === EntityState.Removed || !videoPlayer) {
                removeVideoEventsEntity(entity);
                continue;
            }
            // Compare with last state
            const videoEvent = videoEventComponent.get(entity);
            const values = videoEvent.values();
            const valuesAmount = videoEvent.size;
            let latestVideoEventComponentState = undefined;
            // get latest component state
            let index = 0;
            for (const value of values) {
                if (index === valuesAmount - 1)
                    latestVideoEventComponentState = value;
                index++;
            }
            if (latestVideoEventComponentState === undefined ||
                (data.lastVideoState !== undefined && data.lastVideoState === latestVideoEventComponentState.state))
                continue;
            data.callback(latestVideoEventComponentState);
            entitiesCallbackVideoStateMap.set(entity, {
                callback: data.callback,
                lastVideoState: latestVideoEventComponentState.state
            });
        }
    });
    return {
        removeVideoEventsEntity(entity) {
            removeVideoEventsEntity(entity);
        },
        registerVideoEventsEntity(entity, callback) {
            registerVideoEventsEntity(entity, callback);
        },
        hasVideoEventsEntity(entity) {
            return hasVideoEventsEntity(entity);
        }
    };
}

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRaycastSystem = void 0;
const components = __importStar(require("../components"));
const entity_1 = require("../engine/entity");
/**
 * @internal
 */
function createRaycastSystem(engine) {
    const raycastComponent = components.Raycast(engine);
    const raycastResultComponent = components.RaycastResult(engine);
    const entitiesCallbackResultMap = new Map();
    const defaultOptions = {
        maxDistance: 16,
        queryType: 0 /* RaycastQueryType.RQT_HIT_FIRST */,
        continuous: false,
        originOffset: { x: 0, y: 0, z: 0 },
        collisionMask: 2 /* ColliderLayer.CL_PHYSICS */
    };
    const getLocalDirectionRaycastDefaultOptions = (options = {}) => ({
        ...defaultOptions,
        ...options,
        directionRawValue: {
            $case: 'localDirection',
            localDirection: options.direction || { x: 0, y: 0, z: 1 }
        }
    });
    const getGlobalDirectionRaycastDefaultOptions = (options = {}) => ({
        ...defaultOptions,
        ...options,
        directionRawValue: {
            $case: 'globalDirection',
            globalDirection: options.direction || { x: 0, y: 0, z: 1 }
        }
    });
    const getGlobalTargetRaycastDefaultOptions = (options = {}) => ({
        ...defaultOptions,
        ...options,
        directionRawValue: {
            $case: 'globalTarget',
            globalTarget: options.target || { x: 0, y: 0, z: 0 }
        }
    });
    const getTargetEntityRaycastDefaultOptions = (options = {}) => ({
        ...defaultOptions,
        ...options,
        directionRawValue: {
            $case: 'targetEntity',
            targetEntity: options.targetEntity || 0
        }
    });
    function registerRaycast(entity, callback, options) {
        const raycast = raycastComponent.getOrCreateMutable(entity);
        raycast.maxDistance = options.maxDistance;
        raycast.originOffset = options.originOffset;
        raycast.collisionMask = options.collisionMask;
        raycast.direction = options.directionRawValue;
        raycast.continuous = options.continuous;
        raycast.queryType = options.queryType;
        entitiesCallbackResultMap.set(entity, { callback: callback });
    }
    function removeRaycast(entity) {
        raycastComponent.deleteFrom(entity);
        raycastResultComponent.deleteFrom(entity);
        entitiesCallbackResultMap.delete(entity);
    }
    // @internal
    engine.addSystem(function EventSystem() {
        for (const [entity, data] of entitiesCallbackResultMap) {
            const raycast = raycastComponent.getOrNull(entity);
            if (engine.getEntityState(entity) === entity_1.EntityState.Removed || !raycast) {
                entitiesCallbackResultMap.delete(entity);
                continue;
            }
            const currentResult = raycastResultComponent.getOrNull(entity);
            if (!currentResult)
                continue;
            data.callback(currentResult);
            if (!raycast.continuous)
                removeRaycast(entity);
        }
    });
    return {
        removeRaycasterEntity(entity) {
            removeRaycast(entity);
        },
        registerLocalDirectionRaycast(entity, callback, opts) {
            registerRaycast(entity, callback, getLocalDirectionRaycastDefaultOptions(opts));
        },
        registerGlobalDirectionRaycast(entity, callback, opts) {
            registerRaycast(entity, callback, getGlobalDirectionRaycastDefaultOptions(opts));
        },
        registerGlobalTargetRaycast(entity, callback, opts) {
            registerRaycast(entity, callback, getGlobalTargetRaycastDefaultOptions(opts));
        },
        registerTargetEntityRaycast(entity, callback, opts) {
            registerRaycast(entity, callback, getTargetEntityRaycastDefaultOptions(opts));
        }
    };
}
exports.createRaycastSystem = createRaycastSystem;

import { RaycastQueryType, PBRaycastResult } from '../components';
import { DeepReadonlyObject, Entity } from '../engine';
import { Vector3 } from '../components/generated/pb/decentraland/common/vectors.gen';
/**
 * @public
 */
export type RaycastSystemCallback = (event: DeepReadonlyObject<PBRaycastResult>) => void;
/**
 * @public
 */
export type RaycastSystemOptions = {
    originOffset?: Vector3 | undefined;
    maxDistance: number;
    queryType: RaycastQueryType;
    continuous?: boolean | undefined;
    collisionMask?: number | undefined;
};
export type LocalDirectionRaycastSystemOptions = {
    direction?: Vector3;
};
export type LocalDirectionRaycastOptions = RaycastSystemOptions & LocalDirectionRaycastSystemOptions;
export type GlobalDirectionRaycastSystemOptions = {
    direction?: Vector3;
};
export type GlobalDirectionRaycastOptions = RaycastSystemOptions & GlobalDirectionRaycastSystemOptions;
export type GlobalTargetRaycastSystemOptions = {
    target?: Vector3;
};
export type GlobalTargetRaycastOptions = RaycastSystemOptions & GlobalTargetRaycastSystemOptions;
export type TargetEntityRaycastSystemOptions = {
    targetEntity?: number;
};
export type TargetEntityRaycastOptions = RaycastSystemOptions & TargetEntityRaycastSystemOptions;
/**
 * @public
 */
export interface RaycastSystem {
    /**
     * @public
     * Remove the callback for raycast event
     * @param entity - Entity where the callback was attached
     */
    removeRaycasterEntity(entity: Entity): void;
    /**
     * @public
     * Execute callback when the entity receives a RaycastResult component update.
     * Uses a Vector3 entity-local direction value to calculate the ray direction
     * @param entity - Entity to attach the callback
     * @param callback - Function to execute when the entity's RaycastResult component is updated
     * @param options - Raycast configuration options
     */
    registerLocalDirectionRaycast(entity: Entity, callback: RaycastSystemCallback, options?: Partial<LocalDirectionRaycastOptions>): void;
    /**
     * @public
     * Execute callback when the entity receives a RaycastResult component update.
     * Uses a Vector3 global direction value to calculate the ray direction
     * @param entity - Entity to attach the callback
     * @param callback - Function to execute when the entity's RaycastResult component is updated
     * @param options - Raycast configuration options
     */
    registerGlobalDirectionRaycast(entity: Entity, callback: RaycastSystemCallback, options?: Partial<GlobalDirectionRaycastOptions>): void;
    /**
     * @public
     * Execute callback when the entity receives a RaycastResult component update.
     * Uses a Vector3 global target position to calculate the ray direction
     * @param entity - Entity to attach the callback
     * @param callback - Function to execute when the entity's RaycastResult component is updated
     * @param options - Raycast configuration options
     */
    registerGlobalTargetRaycast(entity: Entity, callback: RaycastSystemCallback, options?: Partial<GlobalTargetRaycastOptions>): void;
    /**
     * @public
     * Execute callback when the entity receives a RaycastResult component update.
     * Uses an target Entity value to calculate the ray direction
     * @param entity - Entity to attach the callback
     * @param callback - Function to execute when the entity's RaycastResult component is updated
     * @param options - Raycast configuration options
     */
    registerTargetEntityRaycast(entity: Entity, callback: RaycastSystemCallback, options?: Partial<TargetEntityRaycastOptions>): void;
}

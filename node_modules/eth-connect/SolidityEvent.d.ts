/**
 * @file event.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2014
 */
import { RequestManager } from './RequestManager';
import { Contract } from './Contract';
import { EthFilter } from './Filter';
import { AbiEvent, AbiInput, FilterOptions, LogObject } from './Schema';
/**
 * This prototype should be used to create event filters
 */
export declare class SolidityEvent {
    requestManager: RequestManager;
    address: string;
    _anonymous: boolean;
    _name: string;
    _params: AbiInput[];
    constructor(requestManager: RequestManager, json: AbiEvent, address: string);
    /**
     * Should be used to get filtered param types
     *
     * @param decide - True if returned typed should be indexed
     */
    types(indexed: boolean): AbiInput[];
    /**
     * Should be used to get event display name
     */
    displayName(): string;
    /**
     * Should be used to get event type name
     */
    typeName(): string;
    /**
     * Should be used to get event signature
     */
    signature(): string;
    /**
     * Should be used to encode indexed params and options to one final object
     *
     * @param {object} indexed
     * @param {object} options
     */
    encode(indexed?: Record<string, any>, options?: FilterOptions): FilterOptions;
    /**
     * Should be used to decode indexed params and options
     *
     * @param {object} data
     */
    decode(data: LogObject): LogObject & {
        event: string;
        address: string;
        args: Record<string, any>;
    };
    /**
     * Should be used to create new filter object from event
     *
     * @param {object} indexed
     * @param {object} options
     */
    execute(indexed: Record<string, any>, options?: FilterOptions): Promise<EthFilter<LogObject>>;
    /**
     * Should be used to attach event to contract object
     *
     * @param {Contract}
     */
    attachToContract(contract: Contract): void;
}
//# sourceMappingURL=SolidityEvent.d.ts.map
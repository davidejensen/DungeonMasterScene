import { SolidityFunction } from './SolidityFunction';
import { SolidityEvent } from './SolidityEvent';
import { AllSolidityEvents } from './AllSolidityEvents';
/**
 * Should be called to add functions to contract object
 *
 * @param contract - The contract instance
 */
function addFunctionsToContract(contract) {
    contract.abi
        .filter(function (json) {
        return json.type === 'function';
    })
        .map(function (json) {
        return new SolidityFunction(json);
    })
        .forEach(function (f) {
        f.attachToContract(contract);
    });
}
/**
 * Should be called to add events to contract object
 *
 * @param contract - The contract instance
 */
function addEventsToContract(contract) {
    let events = contract.abi.filter(function (json) {
        return json.type === 'event';
    });
    let allEvents = new AllSolidityEvents(contract.requestManager, events, contract.address);
    events
        .map(function (json) {
        return new SolidityEvent(contract.requestManager, json, contract.address);
    })
        .forEach(function (e) {
        e.attachToContract(contract);
    });
    return allEvents.getAllEventsFunction();
}
/**
 * @public
 * Should be called to create new contract instance
 */
export class Contract {
    constructor(requestManager, abi, address) {
        this.requestManager = requestManager;
        this.abi = abi;
        this.address = address;
        this.events = {};
        this.transactionHash = null;
        this.address = address;
        this.abi = abi;
        // this functions are not part of prototype,
        // because we dont want to spoil the interface
        addFunctionsToContract(this);
        this.allEvents = addEventsToContract(this);
    }
}
//# sourceMappingURL=Contract.js.map
import { RequestManager } from './RequestManager';
import { Contract } from './Contract';
import { AbiFunction, AbiInput, AbiOutput, Quantity } from './Schema';
/**
 * This prototype should be used to call/sendTransaction to solidity functions
 */
export declare class SolidityFunction {
    json: AbiFunction;
    _inputTypes: AbiInput[];
    _outputTypes: AbiOutput[];
    _constant: boolean;
    _name: string;
    _payable: boolean;
    needsToBeTransaction: boolean;
    constructor(json: AbiFunction);
    extractDefaultBlock(args: any[]): string;
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @param arguments - An array of arguments
     */
    validateArgs(args: any[]): void;
    /**
     * Should be used to create payload from arguments
     *
     * @param solidity - function params
     * @param optional - payload options
     */
    toPayload(args: any[]): any;
    /**
     * Should be used to get function signature
     */
    signature(): string;
    unpackOutput(output: string): any;
    /**
     * Calls a contract function or to sendTransaction to solidity function
     *
     * @param requestManager - The RequestManager instance
     */
    execute(requestManager: RequestManager, address: string, ...args: any[]): Promise<any>;
    /**
     * Should be used to estimateGas of solidity function
     */
    estimateGas(requestManager: RequestManager, address: string, ...args: any[]): Promise<Quantity>;
    /**
     * Should be used to get function display name
     */
    displayName(): string;
    /**
     * Should be used to get function type name
     */
    typeName(): string;
    /**
     * Should be called to attach function to contract
     *
     * @param contract - The contract instance
     */
    attachToContract(contract: Contract): void;
}
//# sourceMappingURL=SolidityFunction.d.ts.map
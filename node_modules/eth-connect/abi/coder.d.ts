import { AbiEvent, AbiFunction, AbiInput, AbiOutput } from '../Schema';
export declare type CoerceFunc = (type: string, value: any) => any;
export declare const defaultCoerceFunc: CoerceFunc;
export declare function formatParamType(paramType: Readonly<AbiInput>): string;
export declare function formatSignature(fragment: AbiEvent | AbiFunction): string;
export declare class Tuple extends Array<any> {
    [key: string]: any;
}
export declare class AbiCoder {
    readonly coerceFunc: CoerceFunc;
    constructor(coerceFunc?: CoerceFunc);
    encode(types: ReadonlyArray<Readonly<AbiInput | string>>, values: Array<any>): Uint8Array;
    decode(types: ReadonlyArray<Readonly<AbiOutput | string>>, data: Uint8Array): any;
}
//# sourceMappingURL=coder.d.ts.map
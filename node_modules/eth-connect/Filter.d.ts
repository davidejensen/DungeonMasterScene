import { RequestManager } from './RequestManager';
import { FilterOptions, LogObject, TxHash, SHHFilterOptions, Data, SHHFilterMessage } from './Schema';
import { IFuture } from 'fp-future';
export declare type FilterCallback = (messages: LogObject[] | string[]) => void;
export declare abstract class AbstractFilter<ReceivedLog, TransformedLog = ReceivedLog> {
    requestManager: RequestManager;
    isStarted: boolean;
    isDisposed: boolean;
    formatter: (x: ReceivedLog) => TransformedLog;
    protected filterId: IFuture<Data>;
    protected callbacks: ((message: TransformedLog) => void)[];
    protected stopSemaphore: IFuture<any>;
    constructor(requestManager: RequestManager);
    watch(callback: (message: TransformedLog) => void): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    protected abstract getNewFilter(): Promise<Data>;
    protected abstract getChanges(): Promise<ReceivedLog[]>;
    protected abstract uninstall(): Promise<boolean>;
    /**
     * Adds the callback and sets up the methods, to iterate over the results.
     */
    private poll;
}
export declare class SHHFilter extends AbstractFilter<SHHFilterMessage> {
    requestManager: RequestManager;
    options: SHHFilterOptions;
    constructor(requestManager: RequestManager, options: SHHFilterOptions);
    getMessages(): Promise<SHHFilterMessage[]>;
    protected getNewFilter(): Promise<string>;
    protected getChanges(): Promise<SHHFilterMessage[]>;
    protected uninstall(): Promise<boolean>;
}
export declare class EthFilter<TransformedLog = LogObject, ReceivedLog = LogObject> extends AbstractFilter<ReceivedLog, TransformedLog> {
    requestManager: RequestManager;
    options: FilterOptions;
    formatter: (message: ReceivedLog) => TransformedLog;
    constructor(requestManager: RequestManager, options: FilterOptions, formatter?: (message: ReceivedLog) => TransformedLog);
    getLogs(): Promise<ReceivedLog[]>;
    protected getNewFilter(): Promise<Data>;
    protected getChanges(): Promise<ReceivedLog[]>;
    protected uninstall(): Promise<boolean>;
}
export declare class EthPendingTransactionFilter extends EthFilter<TxHash, TxHash> {
    constructor(requestManager: RequestManager);
    getNewFilter(): Promise<string>;
}
export declare class EthBlockFilter extends EthFilter<TxHash, TxHash> {
    constructor(requestManager: RequestManager);
    getNewFilter(): Promise<string>;
}
//# sourceMappingURL=Filter.d.ts.map